Dense Vector :
	(int count, type* values)
	
Sparse Vector :
	(int nnz, type* values, int* indices, int baseIndex)
	sparse(x) -> (int xNnz, type* xValues, int xIndices, int xBaseIndex)
	nnz : non zeros count
	baseIndex: e.g. 0 for C, 1 for Fortran
	
// Single precision y = y + alpha * sparse(x)
spgpuStatus_t spgpuSasxpy(spgpuHandle_t handle,
	__device float *y,
	const __host float *alpha,
	const __host int *xNnz,
	const __device float *xValues,
	const __device int *xIndices,
	const int xBaseIndex);
	
// Single precision gather from y to xValues (using xIndices)
spgpuStatus_t spgpuSgath(spgpuHandle_t handle,
	__device float *xValues,
	const __host int *xNnz,
	const __device int *xIndices,
	const int xBaseIndex,
	const __device float* y);
	
// Single precision scatter from sparse(x) to y
spgpuStatus_t spgpuSscat(spgpuHandle_t handle,
	__device float* y,
	const __host int *xNnz,
	const __device float *xValues,
	const __device int *xIndices,
	const int xBaseIndex,
	const );
	

spgpuCreateStream/spgpuDestroyStream

alpha e beta passabili come riferimento (host/device o entrambi)

valore di ritorno sia su host che su device
